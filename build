#!/usr/bin/env bash
set -ueo pipefail

usage() {
  local prog="$0"
  cat <<EOF
usage: ${prog} [OPTIONS]

Options:
      --arch <arch> The target architecture to build for. For example, '386', 'amd64', 'arm', 'arm64'.
                    See all options and valid os/arch combinations at https://golang.org/doc/install/source#environment.
                    Default 'amd64'.
  -h, --help        Print these usage instructions.
      --os <os>     The target os to build for. For example, 'darwin' (mac OS), 'linux', or 'windows'.
                    See all options at https://golang.org/doc/install/source#environment.
                    Default 'darwin'.
  -o, --out <file>  The destination of the built binary. Default './bin/app'.
      --src <dir>   The path to source directory. Default './src'.
EOF
}

build_container() {
  local container_tag="$1"
  local os="$2"
  local arch="$3"
  local src_dir="$4"

  docker build --tag "${container_tag}" --file <(cat <<DOCKERFILE
FROM golang:1

WORKDIR /go/src/app
ADD . .

ENV GOOS=${os}
ENV GOARCH=${arch}
RUN go get -d -v ./...
RUN go build -o /go/bin/app -v ./...
DOCKERFILE
) "${src_dir}"
}

extract_app() {
  local container_tag="$1"
  local out_file="$2"

  docker run "${container_tag}" cat "/go/bin/app" > "${out_file}"
	chmod u+x "${out_file}"
}

main() {
  local container_tag="build-container"
  local target_os="darwin"
  local target_arch="amd64"
  local out_file="bin/app"
  local src_dir="src/"

  while [[ "$#" -gt "0" ]]; do
    case "$1" in
      --os)
        target_os="$2"
        shift
        ;;
      --arch)
        target_arch="$2"
        shift
        ;;
      -o|--out)
        out_file="$2"
        shift
        ;;
      -h|--help)
        usage
        exit
        ;;
      --src)
        src_dir="$2"
        shift
        ;;
    esac
    shift
  done

  build_container "${container_tag}" "${target_os}" "${target_arch}" "${src_dir}"
  extract_app "${container_tag}" "${out_file}"

  echo "Build complete. Binary: ${out_file}"
}

main "$@"
